from enum import Enum, auto

# Reserved words
RESERVED_WORDS = (
    "def", "if", "else", "print", "read", "return", "int", "float",
    "string", "for", "new", "null", "break"
)

RESERVED_WORDS_SIZE = len(RESERVED_WORDS)

# File paths
INPUT_FILE = "compiler/input_files/source_code_example.txt"
OUTPUT_FILE = "compiler/outputs/parse.txt"
SYMBOL_TABLE_FILE = "compiler/outputs/symbol_table.txt"

# Token types
GENERIC_TOKEN = "OUTRO"
IDENTIFIER_TOKEN = "IDENT"
INTEGER_TOKEN = "NI"
FLOAT_TOKEN = "NPF"
STRING_TOKEN = "STRING"         
ATRIB_TOKEN = "ATRIB"
RELOP_TOKEN = "RELOP"
SEP_TOKEN = "SEP"
OPEN_BRACES_TOKEN = "OBRACE" # {
CLOSE_BRACES_TOKEN = "CBRACE" # }
ARITH_TOKEN = "ARITH"

# Enum for diagram processing states
class DiagramProcessing(Enum):
    IN_PROGRESS = 0,
    FINISHED = 1,    
    FINISHED_AND_BACKTRACK = 2,
    FAILED = 3,

TERMINALS = (
    "def", "ident", "(", ")", "{", "}", ",", ";", "if", "else",
    "for", "break", "print", "read", "return", "new", "=", "<",
    ">", "<=", ">=", "==", "!=", "+", "-", "*", "/", "[", "]",
    "int", "float", "string", "int_constant", "float_constant",
    "string_constant","null"
)

LL1_PARSING_TABLE = {
    ('S', '$'): ('S', 'PROGRAM $'),
    ('S', 'def'): ('S', 'PROGRAM $'),
    ('S', '{'): ('S', 'PROGRAM $'),
    ('S', 'VARDECL;'): ('S', 'PROGRAM $'),
    ('S', 'ATRIBSTAT;'): ('S', 'PROGRAM $'),
    ('S', 'PRINTSTAT;'): ('S', 'PROGRAM $'),
    ('S', 'READSTAT;'): ('S', 'PROGRAM $'),
    ('S', 'RETURNSTAT;'): ('S', 'PROGRAM $'),
    ('S', 'if'): ('S', 'PROGRAM $'),
    ('S', 'break'): ('S', 'PROGRAM $'),
    ('S', ';'): ('S', 'PROGRAM $'),
    ('S', 'for'): ('S', 'PROGRAM $'),
    ('PROGRAM', '$'): ('PROGRAM', 'FUNCLIST'),
    ('PROGRAM', 'def'): ('PROGRAM', 'FUNCLIST'),
    ('PROGRAM', '{'): ('PROGRAM', 'STATEMENT'),
    ('PROGRAM', 'VARDECL;'): ('PROGRAM', 'STATEMENT'),
    ('PROGRAM', 'ATRIBSTAT;'): ('PROGRAM', 'STATEMENT'),
    ('PROGRAM', 'PRINTSTAT;'): ('PROGRAM', 'STATEMENT'),
    ('PROGRAM', 'READSTAT;'): ('PROGRAM', 'STATEMENT'),
    ('PROGRAM', 'RETURNSTAT;'): ('PROGRAM', 'STATEMENT'),
    ('PROGRAM', 'if'): ('PROGRAM', 'STATEMENT'),
    ('PROGRAM', 'break'): ('PROGRAM', 'STATEMENT'),
    ('PROGRAM', ';'): ('PROGRAM', 'STATEMENT'),
    ('PROGRAM', 'for'): ('PROGRAM', 'STATEMENT'),
    ('FUNCLIST', '$'): ('FUNCLIST', ''),
    ('FUNCLIST', 'def'): ('FUNCLIST', 'FUNCDEF FUNCLIST'),
    ('FUNCDEF', 'def'): ('FUNCDEF', 'def ident ( PARAMLIST ) { STATELIST }'),
    ('PARAMLIST', ')'): ('PARAMLIST', ''),
    ('PARAMLIST', 'int'): ('PARAMLIST', 'TYPE ident PARAMLIST2'),
    ('PARAMLIST', 'float'): ('PARAMLIST', 'TYPE ident PARAMLIST2'),
    ('PARAMLIST', 'string'): ('PARAMLIST', 'TYPE ident PARAMLIST2'),
    ('PARAMLIST2', ')'): ('PARAMLIST2', ''),
    ('PARAMLIST2', ','): ('PARAMLIST2', ', PARAMLIST'),
    ('STATEMENT', '{'): ('STATEMENT', '{ STATELIST }'),
    ('STATEMENT', 'VARDECL;'): ('STATEMENT', 'VARDECL;'),
    ('STATEMENT', 'ATRIBSTAT;'): ('STATEMENT', 'ATRIBSTAT;'),
    ('STATEMENT', 'PRINTSTAT;'): ('STATEMENT', 'PRINTSTAT;'),
    ('STATEMENT', 'READSTAT;'): ('STATEMENT', 'READSTAT;'),
    ('STATEMENT', 'RETURNSTAT;'): ('STATEMENT', 'RETURNSTAT;'),
    ('STATEMENT', 'if'): ('STATEMENT', 'if ( EXPRESSION ) { STATEMENT } ELSEPART'),
    ('STATEMENT', 'break'): ('STATEMENT', 'break ;'),
    ('STATEMENT', ';'): ('STATEMENT', ';'),
    ('STATEMENT', 'for'): ('STATEMENT', 'FORSTAT'),
    ('VARDECL', 'int'): ('VARDECL', 'TYPE ident VARDECL_LIST'),
    ('VARDECL', 'float'): ('VARDECL', 'TYPE ident VARDECL_LIST'),
    ('VARDECL', 'string'): ('VARDECL', 'TYPE ident VARDECL_LIST'),
    ('VARDECL_LIST', '['): ('VARDECL_LIST', '[ int_constant ] VARDECL_LIST'),
    ('ATRIBSTAT', 'ident'): ('ATRIBSTAT', 'LVALUE = ATRIBSTATLIST'),
    ('ATRIBSTATLIST', 'ident'): ('ATRIBSTATLIST', 'FUNCALL'),
    ('ATRIBSTATLIST', '('): ('ATRIBSTATLIST', '( EXPRESSION )'),
    ('ATRIBSTATLIST', 'new'): ('ATRIBSTATLIST', 'ALLOCEXPRESSION'),
    ('FUNCALL', 'ident'): ('FUNCALL', 'ident ( PARAMLISTCALL )'),
    ('PARAMLISTCALL', 'ident'): ('PARAMLISTCALL', 'ident PARAMLISTCALL2'),
    ('PARAMLISTCALL', ')'): ('PARAMLISTCALL', ''),
    ('PARAMLISTCALL2', ')'): ('PARAMLISTCALL2', ''),
    ('PARAMLISTCALL2', ','): ('PARAMLISTCALL2', ', PARAMLISTCALL'),
    ('PRINTSTAT', 'print'): ('PRINTSTAT', 'print ( EXPRESSION )'),
    ('READSTAT', 'read'): ('READSTAT', 'read LVALUE'),
    ('RETURNSTAT', 'return'): ('RETURNSTAT', 'return'),
    ('ELSEPART', '$'): ('ELSEPART', ''),
    ('ELSEPART', '{'): ('ELSEPART', ''),
    ('ELSEPART', '}'): ('ELSEPART', ''),
    ('ELSEPART', 'VARDECL;'): ('ELSEPART', ''),
    ('ELSEPART', 'ATRIBSTAT;'): ('ELSEPART', ''),
    ('ELSEPART', 'PRINTSTAT;'): ('ELSEPART', ''),
    ('ELSEPART', 'READSTAT;'): ('ELSEPART', ''),
    ('ELSEPART', 'RETURNSTAT;'): ('ELSEPART', ''),
    ('ELSEPART', 'if'): ('ELSEPART', ''),
    ('ELSEPART', 'break'): ('ELSEPART', ''),
    ('ELSEPART', ';'): ('ELSEPART', ''),
    ('ELSEPART', 'else'): ('ELSEPART', 'else STATEMENT'),
    ('ELSEPART', 'for'): ('ELSEPART', ''),
    ('FORSTAT', 'for'): ('FORSTAT', 'for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT'),
    ('STATELIST', '{'): ('STATELIST', 'STATEMENT STATELIST2'),
    ('STATELIST', 'VARDECL;'): ('STATELIST', 'STATEMENT STATELIST2'),
    ('STATELIST', 'ATRIBSTAT;'): ('STATELIST', 'STATEMENT STATELIST2'),
    ('STATELIST', 'PRINTSTAT;'): ('STATELIST', 'STATEMENT STATELIST2'),
    ('STATELIST', 'READSTAT;'): ('STATELIST', 'STATEMENT STATELIST2'),
    ('STATELIST', 'RETURNSTAT;'): ('STATELIST', 'STATEMENT STATELIST2'),
    ('STATELIST', 'if'): ('STATELIST', 'STATEMENT STATELIST2'),
    ('STATELIST', 'break'): ('STATELIST', 'STATEMENT STATELIST2'),
    ('STATELIST', ';'): ('STATELIST', 'STATEMENT STATELIST2'),
    ('STATELIST', 'for'): ('STATELIST', 'STATEMENT STATELIST2'),
    ('STATELIST2', '{'): ('STATELIST2', 'STATELIST'),
    ('STATELIST2', '}'): ('STATELIST2', ''),
    ('STATELIST2', 'VARDECL;'): ('STATELIST2', 'STATELIST'),
    ('STATELIST2', 'ATRIBSTAT;'): ('STATELIST2', 'STATELIST'),
    ('STATELIST2', 'PRINTSTAT;'): ('STATELIST2', 'STATELIST'),
    ('STATELIST2', 'READSTAT;'): ('STATELIST2', 'STATELIST'),
    ('STATELIST2', 'RETURNSTAT;'): ('STATELIST2', 'STATELIST'),
    ('STATELIST2', 'if'): ('STATELIST2', 'STATELIST'),
    ('STATELIST2', 'break'): ('STATELIST2', 'STATELIST'),
    ('STATELIST2', ';'): ('STATELIST2', 'STATELIST'),
    ('STATELIST2', 'for'): ('STATELIST2', 'STATELIST'),
    ('ALLOCEXPRESSION', 'new'): ('ALLOCEXPRESSION', 'new TYPE [ NUMEXPRESSION ] ALLOCEXPR_LIST'),
    ('ALLOCEXPR_LIST', ')'): ('ALLOCEXPR_LIST', ''),
    ('ALLOCEXPR_LIST', ';'): ('ALLOCEXPR_LIST', ''),
    ('ALLOCEXPR_LIST', '['): ('ALLOCEXPR_LIST', '[ NUMEXPRESSION ] ALLOCEXPR_LIST'),
    ('EXPRESSION', 'ident'): ('EXPRESSION', 'NUMEXPRESSION RELATIONAL_PART'),
    ('EXPRESSION', '('): ('EXPRESSION', 'NUMEXPRESSION RELATIONAL_PART'),
    ('EXPRESSION', 'int_constant'): ('EXPRESSION', 'NUMEXPRESSION RELATIONAL_PART'),
    ('EXPRESSION', '=+'): ('EXPRESSION', 'NUMEXPRESSION RELATIONAL_PART'),
    ('EXPRESSION', '-'): ('EXPRESSION', 'NUMEXPRESSION RELATIONAL_PART'),
    ('EXPRESSION', 'float_constant'): ('EXPRESSION', 'NUMEXPRESSION RELATIONAL_PART'),
    ('EXPRESSION', 'string_constant'): ('EXPRESSION', 'NUMEXPRESSION RELATIONAL_PART'),
    ('EXPRESSION', 'null'): ('EXPRESSION', 'NUMEXPRESSION RELATIONAL_PART'),
    ('RELATIONAL_PART', ')'): ('RELATIONAL_PART', ''),
    ('RELATIONAL_PART', ';'): ('RELATIONAL_PART', ''),
    ('RELATIONAL_PART', '<'): ('RELATIONAL_PART', 'RELATIONAL_OP NUMEXPRESSION'),
    ('RELATIONAL_PART', '>'): ('RELATIONAL_PART', 'RELATIONAL_OP NUMEXPRESSION'),
    ('RELATIONAL_PART', '<='): ('RELATIONAL_PART', 'RELATIONAL_OP NUMEXPRESSION'),
    ('RELATIONAL_PART', '>='): ('RELATIONAL_PART', 'RELATIONAL_OP NUMEXPRESSION'),
    ('RELATIONAL_PART', '=='): ('RELATIONAL_PART', 'RELATIONAL_OP NUMEXPRESSION'),
    ('RELATIONAL_PART', '!='): ('RELATIONAL_PART', 'RELATIONAL_OP NUMEXPRESSION'),
    ('NUMEXPRESSION', 'ident'): ('NUMEXPRESSION', 'TERM NUMEXPRESSION_LIST'),
    ('NUMEXPRESSION', '('): ('NUMEXPRESSION', 'TERM NUMEXPRESSION_LIST'),
    ('NUMEXPRESSION', 'int_constant'): ('NUMEXPRESSION', 'TERM NUMEXPRESSION_LIST'),
    ('NUMEXPRESSION', '=+'): ('NUMEXPRESSION', 'TERM NUMEXPRESSION_LIST'),
    ('NUMEXPRESSION', '-'): ('NUMEXPRESSION', 'TERM NUMEXPRESSION_LIST'),
    ('NUMEXPRESSION', 'float_constant'): ('NUMEXPRESSION', 'TERM NUMEXPRESSION_LIST'),
    ('NUMEXPRESSION', 'string_constant'): ('NUMEXPRESSION', 'TERM NUMEXPRESSION_LIST'),
    ('NUMEXPRESSION', 'null'): ('NUMEXPRESSION', 'TERM NUMEXPRESSION_LIST'),
    ('NUMEXPRESSION_LIST', ')'): ('NUMEXPRESSION_LIST', ''),
    ('NUMEXPRESSION_LIST', ';'): ('NUMEXPRESSION_LIST', ''),
    ('NUMEXPRESSION_LIST', ']'): ('NUMEXPRESSION_LIST', ''),
    ('NUMEXPRESSION_LIST', '<'): ('NUMEXPRESSION_LIST', ''),
    ('NUMEXPRESSION_LIST', '>'): ('NUMEXPRESSION_LIST', ''),
    ('NUMEXPRESSION_LIST', '<='): ('NUMEXPRESSION_LIST', ''),
    ('NUMEXPRESSION_LIST', '>='): ('NUMEXPRESSION_LIST', ''),
    ('NUMEXPRESSION_LIST', '=='): ('NUMEXPRESSION_LIST', ''),
    ('NUMEXPRESSION_LIST', '!='): ('NUMEXPRESSION_LIST', ''),
    ('NUMEXPRESSION_LIST', '=+'): ('NUMEXPRESSION_LIST', 'ADDITIVE_OP TERM NUMEXPRESSION_LIST'),
    ('NUMEXPRESSION_LIST', '-'): ('NUMEXPRESSION_LIST', 'ADDITIVE_OP TERM NUMEXPRESSION_LIST'),
    ('TERM', 'ident'): ('TERM', 'UNARYEXPR TERM_LIST'),
    ('TERM', '('): ('TERM', 'UNARYEXPR TERM_LIST'),
    ('TERM', 'int_constant'): ('TERM', 'UNARYEXPR TERM_LIST'),
    ('TERM', '=+'): ('TERM', 'UNARYEXPR TERM_LIST'),
    ('TERM', '-'): ('TERM', 'UNARYEXPR TERM_LIST'),
    ('TERM', 'float_constant'): ('TERM', 'UNARYEXPR TERM_LIST'),
    ('TERM', 'string_constant'): ('TERM', 'UNARYEXPR TERM_LIST'),
    ('TERM', 'null'): ('TERM', 'UNARYEXPR TERM_LIST'),
    ('TERM_LIST', ')'): ('TERM_LIST', ''),
    ('TERM_LIST', ';'): ('TERM_LIST', ''),
    ('TERM_LIST', ']'): ('TERM_LIST', ''),
    ('TERM_LIST', '<'): ('TERM_LIST', ''),
    ('TERM_LIST', '>'): ('TERM_LIST', ''),
    ('TERM_LIST', '<='): ('TERM_LIST', ''),
    ('TERM_LIST', '>='): ('TERM_LIST', ''),
    ('TERM_LIST', '=='): ('TERM_LIST', ''),
    ('TERM_LIST', '!='): ('TERM_LIST', ''),
    ('TERM_LIST', '=+'): ('TERM_LIST', ''),
    ('TERM_LIST', '-'): ('TERM_LIST', ''),
    ('TERM_LIST', '*'): ('TERM_LIST', 'MULTIPLICATIVE_OP UNARYEXPR TERM_LIST'),
    ('TERM_LIST', '/'): ('TERM_LIST', 'MULTIPLICATIVE_OP UNARYEXPR TERM_LIST'),
    ('UNARYEXPR', 'ident'): ('UNARYEXPR', 'UNARY_OP FACTOR'),
    ('UNARYEXPR', '('): ('UNARYEXPR', 'UNARY_OP FACTOR'),
    ('UNARYEXPR', 'int_constant'): ('UNARYEXPR', 'UNARY_OP FACTOR'),
    ('UNARYEXPR', '=+'): ('UNARYEXPR', 'UNARY_OP FACTOR'),
    ('UNARYEXPR', '-'): ('UNARYEXPR', 'UNARY_OP FACTOR'),
    ('UNARYEXPR', 'float_constant'): ('UNARYEXPR', 'UNARY_OP FACTOR'),
    ('UNARYEXPR', 'string_constant'): ('UNARYEXPR', 'UNARY_OP FACTOR'),
    ('UNARYEXPR', 'null'): ('UNARYEXPR', 'UNARY_OP FACTOR'),
    ('UNARY_OP', 'ident'): ('UNARY_OP', ''),
    ('UNARY_OP', '('): ('UNARY_OP', ''),
    ('UNARY_OP', 'int_constant'): ('UNARY_OP', ''),
    ('UNARY_OP', '=+'): ('UNARY_OP', 'ADDITIVE_OP'),
    ('UNARY_OP', '-'): ('UNARY_OP', 'ADDITIVE_OP'),
    ('UNARY_OP', 'float_constant'): ('UNARY_OP', ''),
    ('UNARY_OP', 'string_constant'): ('UNARY_OP', ''),
    ('UNARY_OP', 'null'): ('UNARY_OP', ''),
    ('FACTOR', 'ident'): ('FACTOR', 'LVALUE'),
    ('FACTOR', '('): ('FACTOR', '( NUMEXPRESSION )'),
    ('FACTOR', 'int_constant'): ('FACTOR', 'CONSTANT'),
    ('FACTOR', 'float_constant'): ('FACTOR', 'CONSTANT'),
    ('FACTOR', 'string_constant'): ('FACTOR', 'CONSTANT'),
    ('FACTOR', 'null'): ('FACTOR', 'CONSTANT'),
    ('LVALUE', 'ident'): ('LVALUE', 'ident LVALUE_LIST'),
    ('LVALUE_LIST', ')'): ('LVALUE_LIST', ''),
    ('LVALUE_LIST', ';'): ('LVALUE_LIST', ''),
    ('LVALUE_LIST', '['): ('LVALUE_LIST', '[ NUMEXPRESSION ] LVALUE_LIST'),
    ('LVALUE_LIST', ']'): ('LVALUE_LIST', ''),
    ('LVALUE_LIST', '='): ('LVALUE_LIST', ''),
    ('LVALUE_LIST', '<'): ('LVALUE_LIST', ''),
    ('LVALUE_LIST', '>'): ('LVALUE_LIST', ''),
    ('LVALUE_LIST', '<='): ('LVALUE_LIST', ''),
    ('LVALUE_LIST', '>='): ('LVALUE_LIST', ''),
    ('LVALUE_LIST', '=='): ('LVALUE_LIST', ''),
    ('LVALUE_LIST', '!='): ('LVALUE_LIST', ''),
    ('LVALUE_LIST', '=+'): ('LVALUE_LIST', ''),
    ('LVALUE_LIST', '-'): ('LVALUE_LIST', ''),
    ('LVALUE_LIST', '*'): ('LVALUE_LIST', ''),
    ('LVALUE_LIST', '/'): ('LVALUE_LIST', ''),
    ('RELATIONAL_OP', '<'): ('RELATIONAL_OP', '<'),
    ('RELATIONAL_OP', '>'): ('RELATIONAL_OP', '>'),
    ('RELATIONAL_OP', '<='): ('RELATIONAL_OP', '<='),
    ('RELATIONAL_OP', '>='): ('RELATIONAL_OP', '>='),
    ('RELATIONAL_OP', '=='): ('RELATIONAL_OP', '=='),
    ('RELATIONAL_OP', '!='): ('RELATIONAL_OP', '!='),
    ('ADDITIVE_OP', '=+'): ('ADDITIVE_OP', '+'),
    ('ADDITIVE_OP', '-'): ('ADDITIVE_OP', '-'),
    ('MULTIPLICATIVE_OP', '*'): ('MULTIPLICATIVE_OP', '*'),
    ('MULTIPLICATIVE_OP', '/'): ('MULTIPLICATIVE_OP', '/'),
    ('TYPE', 'int'): ('TYPE', 'int'),
    ('TYPE', 'float'): ('TYPE', 'float'),
    ('TYPE', 'string'): ('TYPE', 'string'),
    ('CONSTANT', 'int_constant'): ('CONSTANT', 'int_constant'),
    ('CONSTANT', 'float_constant'): ('CONSTANT', 'float_constant'),
    ('CONSTANT', 'string_constant'): ('CONSTANT', 'string_constant'),
    ('CONSTANT', 'null'): ('CONSTANT', 'null')
 }
